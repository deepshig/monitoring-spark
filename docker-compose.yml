version: "3.2"

# list of containers to be run
services:
  # rabbit_mq container uses the default rabbitmq image
  # exposes the ports
  # uses the specified volume
  rabbit_mq:
    # we use management image to get the
    # plugin for web dashboard
    image: rabbitmq:3.8-rc-management
    container_name: rabbit_mq
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbit_mqdata:/usr/share/rabbitmq/data

  cassandra_node1:
    image: cassandra:3.11.6
    # In case this is the first time starting up cassandra we need to ensure
    # that all nodes do not start up at the same time. Cassandra has a
    # 2 minute rule i.e. 2 minutes between each node boot up. Booting up
    # nodes simultaneously is a mistake. This only needs to happen the first
    # time we bootup. Configuration below assumes if the Cassandra data
    # directory is empty it means that we are starting up for the first
    # time.
    container_name: cassandra_node1
    command: bash -c 'if [ -z "$$(ls -A /var/lib/cassandra/)" ] ; then sleep 0; fi && /docker-entrypoint.sh cassandra -f'
    volumes:
      - ./cassandra_node1:/var/lib/cassandra
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 20M
    environment:
      CASSANDRA_CLUSTER_NAME: monitoring_cluster
      CASSANDRA_SEEDS: cassandra_node1
    # Exposing ports for inter cluste communication
    expose:
      # Intra-node communication
      - 7000
      # TLS intra-node communication
      - 7001
      # JMX
      - 7199
      # CQL
      - 9042
      # Thrift service
      - 9160
    ports:
      - 9042:9042
    ulimits:
      memlock: -1
      nproc: 32768
      nofile: 100000

  cassandra_node2:
    image: cassandra:3.11.2
    container_name: cassandra_node2
    command: bash -c 'if [ -z "$$(ls -A /var/lib/cassandra/)" ] ; then sleep 0; fi && /docker-entrypoint.sh cassandra -f'
    volumes:
      - ./cassandra_node2:/var/lib/cassandra
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 20M
    environment:
      CASSANDRA_CLUSTER_NAME: monitoring_cluster
      CASSANDRA_SEEDS: cassandra_node1
    expose:
      - 7000
      - 7001
      - 7199
      - 9042
      - 9160
    ulimits:
      memlock: -1
      nproc: 32768
      nofile: 100000

  data_generator:
    build:
      context: ./
      dockerfile: ./data_generator/Dockerfile
    container_name: data_generator
    depends_on:
      - rabbit_mq
    environment:
      AMQP_URL: 'amqp://rabbit_mq?connection_attempts=10&retry_delay=10'
    volumes:
      - ./data_generator:/usr/src/app/data_generator

  metrics_computer:
    build:
      context: ./
      dockerfile: ./metrics_computer/Dockerfile
    container_name: metrics_computer
    depends_on:
      - rabbit_mq
      - cassandra_node1
      - cassandra_node2
    environment:
      AMQP_URL: 'amqp://rabbit_mq?connection_attempts=10&retry_delay=10'
      CASSANDRA_HOSTS: 'node1,node2'
    volumes:
      - ./metrics_computer:/usr/src/app/metrics_computer

  portainer:
    image: portainer/portainer
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer-data:/data
    # Enable you to access potainers web interface from your host machine
    # using http://localhost:10001
    ports:
      - "10001:9000"

volumes:
    rabbit_mqdata:
      driver: local
